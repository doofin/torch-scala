// Generated by JavaCPP version 1.4.3: DO NOT EDIT THIS FILE


#ifdef _WIN32
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __declspec(dllexport)
    #define JNIIMPORT __declspec(dllimport)
    #define JNICALL __stdcall

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#elif defined(__GNUC__) && !defined(__ANDROID__)
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __attribute__((visibility("default")))
    #define JNIIMPORT
    #define JNICALL

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif

#include <jni.h>

#ifdef __ANDROID__
    #include <android/log.h>
    #include <pthread.h>
#elif defined(__APPLE__) && defined(__OBJC__)
    #include <TargetConditionals.h>
    #include <Foundation/Foundation.h>
#endif

#ifdef __linux__
    #include <malloc.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <sys/sysinfo.h>
    #include <fcntl.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <link.h>
#elif defined(__APPLE__)
    #include <sys/types.h>
    #include <sys/sysctl.h>
    #include <mach/mach_init.h>
    #include <mach/mach_host.h>
    #include <mach/task.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <mach-o/dyld.h>
#elif defined(_WIN32)
    #define NOMINMAX
    #include <windows.h>
    #include <psapi.h>
#endif

#if defined(__ANDROID__) || TARGET_OS_IPHONE
    #define NewWeakGlobalRef(obj) NewGlobalRef(obj)
    #define DeleteWeakGlobalRef(obj) DeleteGlobalRef(obj)
#endif

#include <limits.h>
#include <stddef.h>
#ifndef _WIN32
    #include <stdint.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <exception>
#include <memory>
#include <new>

#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))
#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))

#if defined(_MSC_VER)
    #define JavaCPP_noinline __declspec(noinline)
    #define JavaCPP_hidden /* hidden by default */
#elif defined(__GNUC__)
    #define JavaCPP_noinline __attribute__((noinline)) __attribute__ ((unused))
    #define JavaCPP_hidden   __attribute__((visibility("hidden"))) __attribute__ ((unused))
#else
    #define JavaCPP_noinline
    #define JavaCPP_hidden
#endif

#include "c10/util/ArrayRef.h"
#include "torch/all.h"
#include "torch/nn/module.h"
#include "ATen/ATen.h"
#include "/home/nazar/CLionProjects/torch_app/FourierNet.h"
#include <iostream>
#include <vector>
#include <map>
#include "/home/nazar/CLionProjects/torch_app/helper.h"
#include "c10/Device.h"
#include "stdint.h"

static JavaVM* JavaCPP_vm = NULL;
static bool JavaCPP_haveAllocObject = false;
static bool JavaCPP_haveNonvirtual = false;
static const char* JavaCPP_classNames[21] = {
        "org/bytedeco/javacpp/Pointer",
        "java/lang/String",
        "org/bytedeco/javacpp/Pointer$NativeDeallocator",
        "org/bytedeco/javacpp/Loader",
        "java/nio/Buffer",
        "java/lang/Object",
        "torch_scala/api/IntList",
        "java/lang/RuntimeException",
        "java/lang/NullPointerException",
        "org/bytedeco/javacpp/LongPointer",
        "torch_scala/api/TensorOptions",
        "torch_scala/api/FloatList",
        "org/bytedeco/javacpp/FloatPointer",
        "torch_scala/api/Scalar",
        "torch_scala/api/nn/Module",
        "torch_scala/api/ScalarType",
        "torch_scala/api/Tensor",
        "torch_scala/api/Functions$Type",
        "org/bytedeco/javacpp/IntPointer",
        "torch_scala/examples/FourierNet",
        "torch_scala/api/Device" };
static jclass JavaCPP_classes[21] = { NULL };
static jfieldID JavaCPP_addressFID = NULL;
static jfieldID JavaCPP_positionFID = NULL;
static jfieldID JavaCPP_limitFID = NULL;
static jfieldID JavaCPP_capacityFID = NULL;
static jfieldID JavaCPP_deallocatorFID = NULL;
static jfieldID JavaCPP_ownerAddressFID = NULL;
static jmethodID JavaCPP_initMID = NULL;
static jmethodID JavaCPP_arrayMID = NULL;
static jmethodID JavaCPP_stringMID = NULL;
static jmethodID JavaCPP_getBytesMID = NULL;
static jmethodID JavaCPP_toStringMID = NULL;

static inline void JavaCPP_log(const char* fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
#ifdef __ANDROID__
    __android_log_vprint(ANDROID_LOG_ERROR, "javacpp", fmt, ap);
#elif defined(__APPLE__) && defined(__OBJC__)
    NSLogv([NSString stringWithUTF8String:fmt], ap);
#else
    vfprintf(stderr, fmt, ap);
    fprintf(stderr, "\n");
#endif
    va_end(ap);
}

#ifdef __ANDROID__
    static pthread_key_t JavaCPP_current_env;
    static JavaCPP_noinline void JavaCPP_detach_env(void *data)
    {
        if (JavaCPP_vm) {
            JavaCPP_vm->DetachCurrentThread();
        }
    }
    static JavaCPP_noinline void JavaCPP_create_pthread_key(void)
    {
        pthread_key_create(&JavaCPP_current_env, JavaCPP_detach_env);
    }
#endif

static JavaCPP_noinline jclass JavaCPP_getClass(JNIEnv* env, int i) {
    if (JavaCPP_classes[i] == NULL && env->PushLocalFrame(1) == 0) {
        jclass cls = env->FindClass(JavaCPP_classNames[i]);
        if (cls == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error loading class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        JavaCPP_classes[i] = (jclass)env->NewWeakGlobalRef(cls);
        if (JavaCPP_classes[i] == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        env->PopLocalFrame(NULL);
    }
    return JavaCPP_classes[i];
}

static JavaCPP_noinline jfieldID JavaCPP_getFieldID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jfieldID fid = env->GetFieldID(cls, name, sig);
    if (fid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting field ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return fid;
}

static JavaCPP_noinline jmethodID JavaCPP_getMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jmethodID JavaCPP_getStaticMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetStaticMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting static method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jobject JavaCPP_createPointer(JNIEnv* env, int i, jclass cls = NULL) {
    if (cls == NULL && (cls = JavaCPP_getClass(env, i)) == NULL) {
        return NULL;
    }
    if (JavaCPP_haveAllocObject) {
        return env->AllocObject(cls);
    } else {
        jmethodID mid = env->GetMethodID(cls, "<init>", "(Lorg/bytedeco/javacpp/Pointer;)V");
        if (mid == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error getting Pointer constructor of %s, while VM does not support AllocObject()", JavaCPP_classNames[i]);
            return NULL;
        }
        return env->NewObject(cls, mid, NULL);
    }
}

static JavaCPP_noinline void JavaCPP_initPointer(JNIEnv* env, jobject obj, const void* ptr, jlong size, void* owner, void (*deallocator)(void*)) {
    if (deallocator != NULL) {
        jvalue args[4];
        args[0].j = ptr_to_jlong(ptr);
        args[1].j = size;
        args[2].j = ptr_to_jlong(owner);
        args[3].j = ptr_to_jlong(deallocator);
        if (JavaCPP_haveNonvirtual) {
            env->CallNonvirtualVoidMethodA(obj, JavaCPP_getClass(env, 0), JavaCPP_initMID, args);
        } else {
            env->CallVoidMethodA(obj, JavaCPP_initMID, args);
        }
    } else {
        env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(ptr));
        env->SetLongField(obj, JavaCPP_limitFID, (jlong)size);
        env->SetLongField(obj, JavaCPP_capacityFID, (jlong)size);
    }
}

static JavaCPP_noinline jstring JavaCPP_createString(JNIEnv* env, const char* ptr) {
    if (ptr == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->NewStringUTF(ptr);
#else
    size_t length = strlen(ptr);
    jbyteArray bytes = env->NewByteArray(length < INT_MAX ? length : INT_MAX);
    env->SetByteArrayRegion(bytes, 0, length < INT_MAX ? length : INT_MAX, (signed char*)ptr);
    return (jstring)env->NewObject(JavaCPP_getClass(env, 1), JavaCPP_stringMID, bytes);
#endif
}

static JavaCPP_noinline const char* JavaCPP_getStringBytes(JNIEnv* env, jstring str) {
    if (str == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->GetStringUTFChars(str, NULL);
#else
    jbyteArray bytes = (jbyteArray)env->CallObjectMethod(str, JavaCPP_getBytesMID);
    if (bytes == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting bytes from string.");
        return NULL;
    }
    jsize length = env->GetArrayLength(bytes);
    signed char* ptr = new (std::nothrow) signed char[length + 1];
    if (ptr != NULL) {
        env->GetByteArrayRegion(bytes, 0, length, ptr);
        ptr[length] = 0;
    }
    return (const char*)ptr;
#endif
}

static JavaCPP_noinline void JavaCPP_releaseStringBytes(JNIEnv* env, jstring str, const char* ptr) {
#ifdef MODIFIED_UTF8_STRING
    if (str != NULL) {
        env->ReleaseStringUTFChars(str, ptr);
    }
#else
    delete[] ptr;
#endif
}

class JavaCPP_hidden JavaCPP_exception : public std::exception {
public:
    JavaCPP_exception(const char* str) throw() {
        if (str == NULL) {
            strcpy(msg, "Unknown exception.");
        } else {
            strncpy(msg, str, sizeof(msg));
            msg[sizeof(msg) - 1] = 0;
        }
    }
    virtual const char* what() const throw() { return msg; }
    char msg[1024];
};

#ifndef GENERIC_EXCEPTION_CLASS
#define GENERIC_EXCEPTION_CLASS std::exception
#endif
#ifndef GENERIC_EXCEPTION_TOSTRING
#define GENERIC_EXCEPTION_TOSTRING what()
#endif
static JavaCPP_noinline jthrowable JavaCPP_handleException(JNIEnv* env, int i) {
    jstring str = NULL;
    try {
        throw;
    } catch (GENERIC_EXCEPTION_CLASS& e) {
        str = JavaCPP_createString(env, e.GENERIC_EXCEPTION_TOSTRING);
    } catch (...) {
        str = JavaCPP_createString(env, "Unknown exception.");
    }
    jmethodID mid = JavaCPP_getMethodID(env, i, "<init>", "(Ljava/lang/String;)V");
    if (mid == NULL) {
        return NULL;
    }
    return (jthrowable)env->NewObject(JavaCPP_getClass(env, i), mid, str);
}

static JavaCPP_noinline void* JavaCPP_getPointerOwner(JNIEnv* env, jobject obj) {
    if (obj != NULL) {
        jobject deallocator = env->GetObjectField(obj, JavaCPP_deallocatorFID);
        if (deallocator != NULL && env->IsInstanceOf(deallocator, JavaCPP_getClass(env, 2))) {
            return jlong_to_ptr(env->GetLongField(deallocator, JavaCPP_ownerAddressFID));
        }
    }
    return NULL;
}

#include <vector>
template<typename P, typename T = P> class JavaCPP_hidden VectorAdapter {
public:
    VectorAdapter(const P* ptr, typename std::vector<T>::size_type size, void* owner) : ptr((P*)ptr), size(size), owner(owner),
        vec2(ptr ? std::vector<T>((P*)ptr, (P*)ptr + size) : std::vector<T>()), vec(vec2) { }
    VectorAdapter(const std::vector<T>& vec) : ptr(0), size(0), owner(0), vec2(vec), vec(vec2) { }
    VectorAdapter(      std::vector<T>& vec) : ptr(0), size(0), owner(0), vec(vec) { }
    VectorAdapter(const std::vector<T>* vec) : ptr(0), size(0), owner(0), vec(*(std::vector<T>*)vec) { }
    void assign(P* ptr, typename std::vector<T>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        vec.assign(ptr, ptr + size);
    }
    static void deallocate(void* owner) { operator delete(owner); }
    operator P*() {
        if (vec.size() > size) {
            ptr = (P*)(operator new(sizeof(P) * vec.size(), std::nothrow_t()));
        }
        if (ptr) {
            std::copy(vec.begin(), vec.end(), ptr);
        }
        size = vec.size();
        owner = ptr;
        return ptr;
    }
    operator const P*()        { return &vec[0]; }
    operator std::vector<T>&() { return vec; }
    operator std::vector<T>*() { return ptr ? &vec : 0; }
    P* ptr;
    typename std::vector<T>::size_type size;
    void* owner;
    std::vector<T> vec2;
    std::vector<T>& vec;
};

#include <string>
template<typename T = char> class JavaCPP_hidden StringAdapter {
public:
    StringAdapter(const          char* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const signed   char* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const unsigned char* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const       wchar_t* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0), str(str2) { }
    StringAdapter(const unsigned short* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0), str(str2) { }
    StringAdapter(const   signed   int* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0), str(str2) { }
    StringAdapter(const std::basic_string<T>& str) : ptr(0), size(0), owner(0), str2(str), str(str2) { }
    StringAdapter(      std::basic_string<T>& str) : ptr(0), size(0), owner(0), str(str) { }
    StringAdapter(const std::basic_string<T>* str) : ptr(0), size(0), owner(0), str(*(std::basic_string<T>*)str) { }
    void assign(char* ptr, typename std::basic_string<T>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        str.assign(ptr ? ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0);
    }
    void assign(const          char* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(const signed   char* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(const unsigned char* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(wchar_t* ptr, typename std::basic_string<T>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        str.assign(ptr ? ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0);
    }
    void assign(const        wchar_t* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((wchar_t*)ptr, size, owner); }
    void assign(const unsigned short* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((wchar_t*)ptr, size, owner); }
    void assign(const   signed   int* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((wchar_t*)ptr, size, owner); }
    static void deallocate(void* owner) { delete[] (T*)owner; }
    operator char*() {
        const char* data = str.data();
        if (str.size() > size) {
            ptr = new (std::nothrow) char[str.size()+1];
            if (ptr) memset(ptr, 0, str.size()+1);
        }
        if (ptr && memcmp(ptr, data, str.size()) != 0) {
            memcpy(ptr, data, str.size());
            if (size > str.size()) ptr[str.size()] = 0;
        }
        size = str.size();
        owner = ptr;
        return ptr;
    }
    operator       signed   char*() { return (signed   char*)(operator char*)(); }
    operator       unsigned char*() { return (unsigned char*)(operator char*)(); }
    operator const          char*() { return                 str.c_str(); }
    operator const signed   char*() { return (signed   char*)str.c_str(); }
    operator const unsigned char*() { return (unsigned char*)str.c_str(); }
    operator wchar_t*() {
        const wchar_t* data = str.data();
        if (str.size() > size) {
            ptr = new (std::nothrow) wchar_t[str.size()+1];
            if (ptr) memset(ptr, 0, sizeof(wchar_t) * (str.size()+1));
        }
        if (ptr && memcmp(ptr, data, sizeof(wchar_t) * str.size()) != 0) {
            memcpy(ptr, data, sizeof(wchar_t) * str.size());
            if (size > str.size()) ptr[str.size()] = 0;
        }
        size = str.size();
        owner = ptr;
        return ptr;
    }
    operator     unsigned   short*() { return (unsigned short*)(operator wchar_t*)(); }
    operator       signed     int*() { return (  signed   int*)(operator wchar_t*)(); }
    operator const        wchar_t*() { return                  str.c_str(); }
    operator const unsigned short*() { return (unsigned short*)str.c_str(); }
    operator const   signed   int*() { return (  signed   int*)str.c_str(); }
    operator         std::basic_string<T>&() { return str; }
    operator         std::basic_string<T>*() { return ptr ? &str : 0; }
    T* ptr;
    typename std::basic_string<T>::size_type size;
    void* owner;
    std::basic_string<T> str2;
    std::basic_string<T>& str;
};

#ifdef SHARED_PTR_NAMESPACE
template<class T> class SharedPtrAdapter {
public:
    typedef SHARED_PTR_NAMESPACE::shared_ptr<T> S;
    SharedPtrAdapter(const T* ptr, size_t size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
            sharedPtr2(owner != NULL && owner != ptr ? *(S*)owner : S((T*)ptr)), sharedPtr(sharedPtr2) { }
    SharedPtrAdapter(const S& sharedPtr) : ptr(0), size(0), owner(0), sharedPtr2(sharedPtr), sharedPtr(sharedPtr2) { }
    SharedPtrAdapter(      S& sharedPtr) : ptr(0), size(0), owner(0), sharedPtr(sharedPtr) { }
    SharedPtrAdapter(const S* sharedPtr) : ptr(0), size(0), owner(0), sharedPtr(*(S*)sharedPtr) { }
    void assign(T* ptr, size_t size, S* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        this->sharedPtr = owner != NULL && owner != ptr ? *(S*)owner : S((T*)ptr);
    }
    static void deallocate(void* owner) { delete (S*)owner; }
    operator typename SHARED_PTR_NAMESPACE::remove_const<T>::type*() {
        ptr = sharedPtr.get();
        if (owner == NULL || owner == ptr) {
            owner = new S(sharedPtr);
        }
        return (typename SHARED_PTR_NAMESPACE::remove_const<T>::type*)ptr;
    }
    operator S&() { return sharedPtr; }
    operator S*() { return &sharedPtr; }
    T* ptr;
    size_t size;
    void* owner;
    S sharedPtr2;
    S& sharedPtr;
};
#endif

#ifdef UNIQUE_PTR_NAMESPACE
template<class T> class UniquePtrAdapter {
public:
    typedef UNIQUE_PTR_NAMESPACE::unique_ptr<T> U;
    UniquePtrAdapter(const T* ptr, size_t size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
            uniquePtr2(owner != NULL && owner != ptr ? U() : U((T*)ptr)),
            uniquePtr(owner != NULL && owner != ptr ? *(U*)owner : uniquePtr2) { }
    UniquePtrAdapter(U&& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr2(UNIQUE_PTR_NAMESPACE::move(uniquePtr)), uniquePtr(uniquePtr2) { }
    UniquePtrAdapter(const U& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr((U&)uniquePtr) { }
    UniquePtrAdapter(      U& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr(uniquePtr) { }
    UniquePtrAdapter(const U* uniquePtr) : ptr(0), size(0), owner(0), uniquePtr(*(U*)uniquePtr) { }
    void assign(T* ptr, size_t size, U* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        this->uniquePtr = owner != NULL && owner != ptr ? *(U*)owner : U((T*)ptr);
    }
    static void deallocate(void* owner) { delete (U*)owner; }
    operator typename UNIQUE_PTR_NAMESPACE::remove_const<T>::type*() {
        ptr = uniquePtr.get();
        if (ptr == uniquePtr2.get() && (owner == NULL || owner == ptr)) {
            // only move the pointer if we actually own it through uniquePtr2
            owner = new U(UNIQUE_PTR_NAMESPACE::move(uniquePtr));
        }
        return (typename UNIQUE_PTR_NAMESPACE::remove_const<T>::type*)ptr;
    }
    operator U&() { return uniquePtr; }
    operator U*() { return &uniquePtr; }
    T* ptr;
    size_t size;
    void* owner;
    U uniquePtr2;
    U& uniquePtr;
};
#endif

#ifdef __ANDROID__
  static pthread_once_t JavaCPP_once = PTHREAD_ONCE_INIT;
  static pthread_mutex_t JavaCPP_lock = PTHREAD_MUTEX_INITIALIZER;
#endif

static JavaCPP_noinline void JavaCPP_detach(bool detach) {
#if !defined(NO_JNI_DETACH_THREAD) && !defined(__ANDROID__)
    if (detach && JavaCPP_vm->DetachCurrentThread() != JNI_OK) {
        JavaCPP_log("Could not detach the JavaVM from the current thread.");
    }
#endif
}

static JavaCPP_noinline bool JavaCPP_getEnv(JNIEnv** env) {
    bool attached = false;
    JavaVM *vm = JavaCPP_vm;
    if (vm == NULL) {
            JavaCPP_log("Could not get any created JavaVM.");
            *env = NULL;
            return false;
    }
#ifdef __ANDROID__
    pthread_mutex_lock(&JavaCPP_lock);
    pthread_once(&JavaCPP_once, JavaCPP_create_pthread_key);
    if ((*env = (JNIEnv *)pthread_getspecific(JavaCPP_current_env)) != NULL) {
        attached = true;
        goto done;
    }
#endif
    if (vm->GetEnv((void**)env, JNI_VERSION_1_4) != JNI_OK) {
        struct {
            JNIEnv **env;
            operator JNIEnv**() { return env; } // Android JNI
            operator void**() { return (void**)env; } // standard JNI
        } env2 = { env };
        if (vm->AttachCurrentThread(env2, NULL) != JNI_OK) {
            JavaCPP_log("Could not attach the JavaVM to the current thread.");
            *env = NULL;
            goto done;
        }
#ifdef __ANDROID__
        pthread_setspecific(JavaCPP_current_env, *env);
#endif
        attached = true;
    }
    if (JavaCPP_vm == NULL) {
        if (JNI_OnLoad(vm, NULL) < 0) {
            JavaCPP_detach(attached);
            *env = NULL;
            goto done;
        }
    }
done:
#ifdef __ANDROID__
    pthread_mutex_unlock(&JavaCPP_lock);
#endif
    return attached;
}

struct JavaCPP_hidden JavaCPP_torch_1scala_api_Functions_00024Deallocator_1Pointer {
    JavaCPP_torch_1scala_api_Functions_00024Deallocator_1Pointer() : ptr(NULL), obj(NULL) { }
    void operator()(void* arg0);
    void (*ptr)(void* arg0);
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_torch_1scala_api_Functions_00024Deallocator_1Pointer::mid = NULL;



static void JavaCPP_torch_1scala_api_IntList_deallocate(void *p) { delete (c10::ArrayRef<int64_t>*)p; }
static void JavaCPP_torch_1scala_api_TensorOptions_deallocate(void *p) { delete (at::TensorOptions*)p; }
static void JavaCPP_torch_1scala_api_FloatList_deallocate(void *p) { delete (c10::ArrayRef<float>*)p; }
static void JavaCPP_torch_1scala_api_Scalar_deallocate(void *p) { delete (at::Scalar*)p; }
static void JavaCPP_torch_1scala_api_nn_Module_deallocate(void *p) { delete (torch::nn::Module*)p; }
static void JavaCPP_torch_1scala_api_ScalarType_deallocate(void *p) { delete (c10::ScalarType*)p; }
static void JavaCPP_torch_1scala_api_Tensor_deallocate(void *p) { delete (at::Tensor*)p; }
static void JavaCPP_torch_1scala_examples_FourierNet_deallocate(void *p) { delete (FourierNet*)p; }
static void JavaCPP_torch_1scala_api_Device_deallocate(void *p) { delete (c10::Device*)p; }

static const char* JavaCPP_members[21][11] = {
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof" },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof" },
        { "sizeof" },
        { NULL },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { NULL },
        { NULL },
        { "sizeof" },
        { "sizeof" } };
static int JavaCPP_offsets[21][11] = {
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(c10::ArrayRef<int64_t>) },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(at::TensorOptions) },
        { sizeof(c10::ArrayRef<float>) },
        { -1 },
        { sizeof(at::Scalar) },
        { sizeof(torch::nn::Module) },
        { sizeof(c10::ScalarType) },
        { sizeof(at::Tensor) },
        { -1 },
        { -1 },
        { sizeof(FourierNet) },
        { sizeof(c10::Device) } };
static int JavaCPP_memberOffsetSizes[21] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

extern "C" {

JNIEXPORT jint JNICALL JNI_OnLoad_jnijavacpp(JavaVM* vm, void* reserved);
JNIEXPORT void JNICALL JNI_OnUnload_jnijavacpp(JavaVM* vm, void* reserved);

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
    if (JNI_OnLoad_jnijavacpp(vm, reserved) == JNI_ERR) {
        return JNI_ERR;
    }
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnLoad().");
        return JNI_ERR;
    }
    if (JavaCPP_vm == vm) {
        return env->GetVersion();
    }
    JavaCPP_vm = vm;
    JavaCPP_haveAllocObject = env->functions->AllocObject != NULL;
    JavaCPP_haveNonvirtual = env->functions->CallNonvirtualVoidMethodA != NULL;
    jmethodID putMemberOffsetMID = JavaCPP_getStaticMethodID(env, 3, "putMemberOffset", "(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/Class;");
    if (putMemberOffsetMID == NULL) {
        return JNI_ERR;
    }
    for (int i = 0; i < 21 && !env->ExceptionCheck(); i++) {
        for (int j = 0; j < JavaCPP_memberOffsetSizes[i] && !env->ExceptionCheck(); j++) {
            if (env->PushLocalFrame(3) == 0) {
                jvalue args[3];
                args[0].l = env->NewStringUTF(JavaCPP_classNames[i]);
                args[1].l = JavaCPP_members[i][j] == NULL ? NULL : env->NewStringUTF(JavaCPP_members[i][j]);
                args[2].i = JavaCPP_offsets[i][j];
                jclass cls = (jclass)env->CallStaticObjectMethodA(JavaCPP_getClass(env, 3), putMemberOffsetMID, args);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error putting member offsets for class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                JavaCPP_classes[i] = cls == NULL ? NULL : (jclass)env->NewWeakGlobalRef(cls);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                env->PopLocalFrame(NULL);
            }
        }
    }
    JavaCPP_addressFID = JavaCPP_getFieldID(env, 0, "address", "J");
    if (JavaCPP_addressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_positionFID = JavaCPP_getFieldID(env, 0, "position", "J");
    if (JavaCPP_positionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_limitFID = JavaCPP_getFieldID(env, 0, "limit", "J");
    if (JavaCPP_limitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_capacityFID = JavaCPP_getFieldID(env, 0, "capacity", "J");
    if (JavaCPP_capacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_deallocatorFID = JavaCPP_getFieldID(env, 0, "deallocator", "Lorg/bytedeco/javacpp/Pointer$Deallocator;");
    if (JavaCPP_deallocatorFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_ownerAddressFID = JavaCPP_getFieldID(env, 2, "ownerAddress", "J");
    if (JavaCPP_ownerAddressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_initMID = JavaCPP_getMethodID(env, 0, "init", "(JJJJ)V");
    if (JavaCPP_initMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_arrayMID = JavaCPP_getMethodID(env, 4, "array", "()Ljava/lang/Object;");
    if (JavaCPP_arrayMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_stringMID = JavaCPP_getMethodID(env, 1, "<init>", "([B)V");
    if (JavaCPP_stringMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_getBytesMID = JavaCPP_getMethodID(env, 1, "getBytes", "()[B");
    if (JavaCPP_getBytesMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_toStringMID = JavaCPP_getMethodID(env, 5, "toString", "()Ljava/lang/String;");
    if (JavaCPP_toStringMID == NULL) {
        return JNI_ERR;
    }
    return env->GetVersion();
}


JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnUnLoad().");
        return;
    }
    for (int i = 0; i < 21; i++) {
        env->DeleteWeakGlobalRef((jweak)JavaCPP_classes[i]);
        JavaCPP_classes[i] = NULL;
    }
    JNI_OnUnload_jnijavacpp(vm, reserved);
    JavaCPP_vm = NULL;
}

JNIEXPORT void JNICALL Java_torch_1scala_api_IntList_allocate(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    jlong* ptr0 = arg0 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        c10::ArrayRef<int64_t>* rptr = new c10::ArrayRef<int64_t>((long*)ptr0, (size_t)arg1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_IntList_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_IntList_data(JNIEnv* env, jobject obj) {
    c10::ArrayRef<int64_t>* ptr = (c10::ArrayRef<int64_t>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    long* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (long*)ptr->data();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_torch_1scala_api_TensorOptions_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        at::TensorOptions* rptr = new at::TensorOptions();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_TensorOptions_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_TensorOptions_device(JNIEnv* env, jobject obj, jobject arg0) {
    at::TensorOptions* ptr = (at::TensorOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    c10::Device* ptr0 = arg0 == NULL ? NULL : (c10::Device*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    at::TensorOptions* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::TensorOptions(ptr->device(*ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_TensorOptions_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_TensorOptions_device_1index(JNIEnv* env, jobject obj, jshort arg0) {
    at::TensorOptions* ptr = (at::TensorOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    at::TensorOptions* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::TensorOptions(ptr->device_index((int16_t)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_TensorOptions_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_torch_1scala_api_FloatList_allocate(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    float* ptr0 = arg0 == NULL ? NULL : (float*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        c10::ArrayRef<float>* rptr = new c10::ArrayRef<float>((float*)ptr0, (size_t)arg1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_FloatList_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_FloatList_data(JNIEnv* env, jobject obj) {
    c10::ArrayRef<float>* ptr = (c10::ArrayRef<float>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (float*)ptr->data();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 12);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_torch_1scala_api_Scalar_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        at::Scalar* rptr = new at::Scalar((long)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_Scalar_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_torch_1scala_api_Scalar_allocate__F(JNIEnv* env, jobject obj, jfloat arg0) {
    jthrowable exc = NULL;
    try {
        at::Scalar* rptr = new at::Scalar(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_Scalar_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_torch_1scala_api_Scalar_allocate__I(JNIEnv* env, jobject obj, jint arg0) {
    jthrowable exc = NULL;
    try {
        at::Scalar* rptr = new at::Scalar(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_Scalar_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_torch_1scala_api_Scalar_toInt(JNIEnv* env, jobject obj) {
    at::Scalar* ptr = (at::Scalar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->to<int>();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_torch_1scala_api_Scalar_toFloat(JNIEnv* env, jobject obj) {
    at::Scalar* ptr = (at::Scalar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rval = ptr->to<float>();
        rarg = (jfloat)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_torch_1scala_api_Scalar_toLong(JNIEnv* env, jobject obj) {
    at::Scalar* ptr = (at::Scalar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        long rval = (long)ptr->to<long>();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_torch_1scala_api_nn_Module_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        torch::nn::Module* rptr = new torch::nn::Module();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_nn_Module_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_torch_1scala_api_ScalarType_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        c10::ScalarType* rptr = new c10::ScalarType();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_ScalarType_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_add(JNIEnv* env, jobject obj, jobject arg0) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    at::Tensor* ptr0 = arg0 == NULL ? NULL : (at::Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator+=(*ptr0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_type(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    at::Type* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->type();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_torch_1scala_api_Tensor_toString(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char *)(const char*)ptr->toString();
        if (rptr != NULL) {
            rarg = JavaCPP_createString(env, rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_apply__Ltorch_1scala_api_Tensor_2(JNIEnv* env, jobject obj, jobject arg0) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    at::Tensor* ptr0 = arg0 == NULL ? NULL : (at::Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(ptr->operator[](*ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_apply__J(JNIEnv* env, jobject obj, jlong arg0) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(ptr->operator[]((long)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_torch_1scala_api_Tensor_print(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->print();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_torch_1scala_api_Tensor_reset(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->reset();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_torch_1scala_api_Tensor_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        at::Tensor* rptr = new at::Tensor();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_Tensor_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jlong JNICALL Java_torch_1scala_api_Tensor_dim(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        long rval = (long)ptr->dim();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_torch_1scala_api_Tensor_storage_1offset(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        long rval = (long)ptr->storage_offset();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_torch_1scala_api_Tensor_defined(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ptr->defined();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_torch_1scala_api_Tensor_is_1same(JNIEnv* env, jobject obj, jobject arg0) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    at::Tensor* ptr0 = arg0 == NULL ? NULL : (at::Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ptr->is_same(*ptr0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_torch_1scala_api_Tensor_use_1count(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->use_count();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_torch_1scala_api_Tensor_weak_1use_1count(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->weak_use_count();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_sizes(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    c10::ArrayRef<int64_t>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new c10::ArrayRef<int64_t>(ptr->sizes());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_IntList_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 6);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_strides(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    c10::ArrayRef<int64_t>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new c10::ArrayRef<int64_t>(ptr->strides());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_IntList_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 6);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_torch_1scala_api_Tensor_ndimension(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        long rval = (long)ptr->ndimension();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_torch_1scala_api_Tensor_is_1contiguous(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ptr->is_contiguous();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jshort JNICALL Java_torch_1scala_api_Tensor_scalar_1type(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    jthrowable exc = NULL;
    try {
        int8_t rval = (int8_t)ptr->scalar_type();
        rarg = (jshort)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_cpu(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(ptr->cpu());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_cuda(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(ptr->cuda());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_data_1int(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->data<int>();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 18);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Tensor_data_1float(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->data<float>();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 12);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_torch_1scala_api_Tensor_item_1float(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rval = ptr->item<float>();
        rarg = (jfloat)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_torch_1scala_api_Tensor_item_1int(JNIEnv* env, jobject obj) {
    at::Tensor* ptr = (at::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->item<int>();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_torch_1scala_examples_FourierNet_allocate(JNIEnv* env, jobject obj, jint arg0) {
    jthrowable exc = NULL;
    try {
        FourierNet* rptr = new FourierNet((int)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_examples_FourierNet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_torch_1scala_examples_FourierNet_train(JNIEnv* env, jobject obj, jobject arg0, jint arg1, jobject arg2) {
    FourierNet* ptr = (FourierNet*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    float* ptr0 = arg0 == NULL ? NULL : (float*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    VectorAdapter< float > adapter0(ptr0, size0, owner0);
    float* ptr2 = arg2 == NULL ? NULL : (float*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    VectorAdapter< float > adapter2(ptr2, size2, owner2);
    jobject rarg = NULL;
    float* rptr;
    jthrowable exc = NULL;
    try {
        VectorAdapter< float > radapter(ptr->train(adapter0, arg1, adapter2));
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &VectorAdapter< float >::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 12);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    float* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &VectorAdapter< float >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    float* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &VectorAdapter< float >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_tensor__Ltorch_1scala_api_FloatList_2Ltorch_1scala_api_TensorOptions_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    c10::ArrayRef<float>* ptr0 = arg0 == NULL ? NULL : (c10::ArrayRef<float>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    at::TensorOptions* ptr1 = arg1 == NULL ? NULL : (at::TensorOptions*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::tensor(*ptr0, *(const at::TensorOptions*)ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_tensor__Ltorch_1scala_api_IntList_2Ltorch_1scala_api_TensorOptions_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    c10::ArrayRef<int64_t>* ptr0 = arg0 == NULL ? NULL : (c10::ArrayRef<int64_t>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    at::TensorOptions* ptr1 = arg1 == NULL ? NULL : (at::TensorOptions*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::tensor(*ptr0, *(const at::TensorOptions*)ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_create_1options(JNIEnv* env, jobject obj, jint arg0) {
    jobject rarg = NULL;
    at::TensorOptions* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::TensorOptions(at::create_options(arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_TensorOptions_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_make_1ones(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    VectorAdapter< jlong > adapter1(ptr1, size1, owner1);
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::make_ones(arg0, adapter1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    jlong* rptr1 = adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &VectorAdapter< jlong >::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_ones__Ltorch_1scala_api_IntList_2Ltorch_1scala_api_TensorOptions_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    c10::ArrayRef<int64_t>* ptr0 = arg0 == NULL ? NULL : (c10::ArrayRef<int64_t>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    at::TensorOptions* ptr1 = arg1 == NULL ? NULL : (at::TensorOptions*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::ones(*ptr0, *(const at::TensorOptions*)ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_ones__Ltorch_1scala_api_IntList_2(JNIEnv* env, jobject obj, jobject arg0) {
    c10::ArrayRef<int64_t>* ptr0 = arg0 == NULL ? NULL : (c10::ArrayRef<int64_t>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::ones(*ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_int_1list(JNIEnv* env, jobject obj, jint arg0, jintArray arg1) {
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jobject rarg = NULL;
    c10::ArrayRef<int64_t>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = at::int_list((size_t)arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 6);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_arange__Ltorch_1scala_api_Scalar_2Ltorch_1scala_api_Scalar_2Ltorch_1scala_api_TensorOptions_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    at::Scalar* ptr0 = arg0 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    at::Scalar* ptr1 = arg1 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    at::TensorOptions* ptr2 = arg2 == NULL ? NULL : (at::TensorOptions*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::arange(*ptr0, *ptr1, *ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_arange__Ltorch_1scala_api_Scalar_2Ltorch_1scala_api_Scalar_2Ltorch_1scala_api_Scalar_2Ltorch_1scala_api_TensorOptions_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    at::Scalar* ptr0 = arg0 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    at::Scalar* ptr1 = arg1 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    at::Scalar* ptr2 = arg2 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    at::TensorOptions* ptr3 = arg3 == NULL ? NULL : (at::TensorOptions*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::arange(*ptr0, *ptr1, *ptr2, *(const at::TensorOptions*)ptr3));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_arange__Ltorch_1scala_api_Scalar_2Ltorch_1scala_api_Scalar_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    at::Scalar* ptr0 = arg0 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    at::Scalar* ptr1 = arg1 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::arange(*ptr0, *ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_arange__Ltorch_1scala_api_Scalar_2Ltorch_1scala_api_Scalar_2Ltorch_1scala_api_Scalar_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    at::Scalar* ptr0 = arg0 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    at::Scalar* ptr1 = arg1 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    at::Scalar* ptr2 = arg2 == NULL ? NULL : (at::Scalar*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::arange(*ptr0, *ptr1, *ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_from_1blob__Lorg_bytedeco_javacpp_Pointer_2Ltorch_1scala_api_IntList_2Ltorch_1scala_api_IntList_2Ltorch_1scala_api_Functions_00024Deallocator_1Pointer_2Ltorch_1scala_api_TensorOptions_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    c10::ArrayRef<int64_t>* ptr1 = arg1 == NULL ? NULL : (c10::ArrayRef<int64_t>*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    c10::ArrayRef<int64_t>* ptr2 = arg2 == NULL ? NULL : (c10::ArrayRef<int64_t>*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    JavaCPP_torch_1scala_api_Functions_00024Deallocator_1Pointer* ptr3 = arg3 == NULL ? NULL : (JavaCPP_torch_1scala_api_Functions_00024Deallocator_1Pointer*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    at::TensorOptions* ptr4 = arg4 == NULL ? NULL : (at::TensorOptions*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::from_blob(ptr0, *ptr1, *ptr2, (ptr3 == NULL ? NULL : ptr3->ptr), *(const at::TensorOptions*)ptr4));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_torch_1scala_api_Functions_00024_from_1blob__Lorg_bytedeco_javacpp_Pointer_2Ltorch_1scala_api_IntList_2Ltorch_1scala_api_Functions_00024Deallocator_1Pointer_2Ltorch_1scala_api_TensorOptions_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    c10::ArrayRef<int64_t>* ptr1 = arg1 == NULL ? NULL : (c10::ArrayRef<int64_t>*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    JavaCPP_torch_1scala_api_Functions_00024Deallocator_1Pointer* ptr2 = arg2 == NULL ? NULL : (JavaCPP_torch_1scala_api_Functions_00024Deallocator_1Pointer*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    at::TensorOptions* ptr3 = arg3 == NULL ? NULL : (at::TensorOptions*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jobject rarg = NULL;
    at::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new at::Tensor(at::from_blob(ptr0, *ptr1, (const std::function<void(void*)>)(ptr2 == NULL ? NULL : ptr2->ptr), *(const at::TensorOptions*)ptr3));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_torch_1scala_api_Tensor_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jshort JNICALL Java_torch_1scala_api_Device_index(JNIEnv* env, jobject obj) {
    c10::Device* ptr = (c10::Device*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    jthrowable exc = NULL;
    try {
        int16_t rval = (int16_t)ptr->index();
        rarg = (jshort)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jshort JNICALL Java_torch_1scala_api_Device_type(JNIEnv* env, jobject obj) {
    c10::Device* ptr = (c10::Device*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    jthrowable exc = NULL;
    try {
        int16_t rval = (int16_t)ptr->type();
        rarg = (jshort)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_torch_1scala_api_Device_allocate(JNIEnv* env, jobject obj, jstring arg0) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jthrowable exc = NULL;
    try {
        c10::Device* rptr = new c10::Device(ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_torch_1scala_api_Device_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_torch_1scala_api_Device__00024eq_00024eq(JNIEnv* env, jobject obj, jobject arg0) {
    c10::Device* ptr = (c10::Device*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    c10::Device* ptr0 = arg0 == NULL ? NULL : (c10::Device*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)==(*(const c10::Device*)ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_torch_1scala_api_Device__00024bang_00024eq(JNIEnv* env, jobject obj, jobject arg0) {
    c10::Device* ptr = (c10::Device*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    c10::Device* ptr0 = arg0 == NULL ? NULL : (c10::Device*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)!=(*(const c10::Device*)ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_torch_1scala_api_Device_has_1index(JNIEnv* env, jobject obj) {
    c10::Device* ptr = (c10::Device*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ptr->has_index();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_torch_1scala_api_Device_is_1cuda(JNIEnv* env, jobject obj) {
    c10::Device* ptr = (c10::Device*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ptr->is_cuda();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_torch_1scala_api_Device_is_1cpu(JNIEnv* env, jobject obj) {
    c10::Device* ptr = (c10::Device*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ptr->is_cpu();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

}

